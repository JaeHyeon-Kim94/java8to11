어댑터 패턴 : 기존 코드를 클라이언트가 사용하는 인터페이스의 구현체로 바꿔주는 패턴

장점
    - 클라이언트가 사용하는 인터페이스를 따르지 않는 기존 코드를 재사용할 수 있게 해줌.
    - 기존 코드가 하던 일과 특정 인터페이스 구현체로 변환하는 작업을 각기 다른 클래스로 분리하여 관리할 수 있음.(단일책임원칙에 부합)
                    (=Account가 UserDetails를 구현하도록 변경하는)
단점
    - 새 클래스가 생겨 복잡도가 증가할 수 있음.
      상황에 따라 기존 코드(Adaptee)가 인터페이스(Target Interface)를 구현하는 방식으로 수정하는 것도 효율적일 수 있음


 -Client가 사용하는 Target Interface와 Adaptee간의 차이를 메꿔주는 Adapter 구현

