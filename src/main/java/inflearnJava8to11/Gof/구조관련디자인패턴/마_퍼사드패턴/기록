퍼사드(Facade) 패턴
 - 복잡한 서브 시스템(라이브러리, 프레임웍) 의존성을 최소화 하는 방법.
 - Client가 직접 서브 시스템에 해당하는 객체를 만든다거나 인터페이스를 사용하는게 아니라
  중간에 복잡한 서브 시스템을 사용할 기능 하나에 대한 인터페이스, 오퍼레이션 하나로 압축하여 Client는 퍼사드만을 사용하고,
  복잡한 디테일은 퍼사드 뒤로 숨기는 것.

  - 클라이언트가 사용해야 하는 복잡한 서브 시스템 의존성을 간단한 인터페이스로 추상화.


  Client -> Facade.operation() -> SubSystem Classes


  - 장점
    1. 서브시스템에 대한 의존성을 한 곳으로 몰아 넣을 수 있음.
    2. 퍼사드는 결국은 필연적으로 특정 라이브러리, 프레임웍에 의존성을 가질 수밖에 없지만,
    가독성, 재사용성 측면에서 이점을 챙길 수 있음.


  - 단점
    1. 퍼사드 클래스가 서브 시스템에 대한 모든 의존성을 가지게 된다.