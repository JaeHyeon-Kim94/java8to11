
데코레이터 패턴 : 기존에 있는 코드를 변경하지 않으면서 부가적인 기능을 추가할 수 있는, 구조적인 패턴

특징 : 부가 기능을 다양하게 런타임에 추가할 수 있다. 스태틱하게, 컴파일 타임이 아니라 다이나믹하게, 런타임에.

상속이 아닌 위임을 사용해서 보다 유연하게(런타임에) 부가 기능을 추가하는 것 가능.

Client         --         Component<<Interface>>

        ConcreteComponent                   Decorator
                            Concrete Decorator1    Concrete Decorator2



Component라는 인터페이스는 ConcreteComponent와 Decorator가 구현중.

컴포짓 패턴과의 차이는?

컴포넌트가 컴포짓 패턴처럼 여러개의 Decorator를 가지고있는 것이 아니라

Decorator가 감싸고 있는 딱 하나의 컴포넌트 타입의 인스턴스를 가지고 있음.


장점
 - 새로운 클래스를 만들지 않고 기존 기능을 조합할 수 있음(상속을 사용한다면 기능이 추가될 때마다 새로운 클래스가 계속 추가)\
                            + 단일책임원칙
 - 컴파일 타임이 아닌 런타임에 동적으로 기능을 변경할 수 있다. (by flag)

단점
 - Decorator를 조합하는 과정에서 코드가 복잡해질 수 있음.