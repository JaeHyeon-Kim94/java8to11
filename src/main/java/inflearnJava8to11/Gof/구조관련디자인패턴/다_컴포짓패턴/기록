컴포짓 패턴 : 그룹 전체와 개별 객체를 동일하게 처리할 수 있는 패턴
            전체 계층구조와 그 계층구조를 구성하는 부분적인 객체를 클라이언트 입장에서 동일하게 취급할 수 있게끔 구조를 만드는 것.

전체인지 전체의 부분인지에 상관없이 동일한 컴포넌트로 인식할 수 있는 계층 구조를 만드는 것.

트리구조 구성이 강제됨.

Client는 Component라는 인터페이스만 사용하고 Leaf(가장 기본적인 단위) Composite(기본적인 단위를 그룹으로 가져갈 수 있는)

여기서 Composite에 속한 그룹들은 Leaf의 타입이 아니라 Component 타입이다. 그래야 동일하게 취급할 수 있으므로.

 - 장점
        복잡한 트리구조를 편리하게 사용할 수 있음. 최상위 node에 해당하는지 leaf의 node에 해당하는지에 상관 없이 사용가능.

        다형성과 재귀를 활용할 수 있음.

        클라이언트 코드를 변경하지 않고 새로운 엘리먼트 타입을 추가할 수 있음.
                    (어떤 새로운 타입의 Leaf 혹은  Composite이 추가되더라도 Client 코드는 바뀌지 않음. -> printPrice는 변하지 X)
                    --> Open Closed Principle


 - 단점
        트리 구성이 강제되기 때문에(공통된 인터페이스를 정의해야 하기 때문에) 지나치게 일반화 해야 하는 경우 발생할 수 있음
        지나치게 일반화하면 일반화된 타입의 엘리먼트를, 다시 타입을 체크해야 하는 불상사가 발생할 수 있음.