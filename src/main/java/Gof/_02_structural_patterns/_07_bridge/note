브릿지 패턴 : 추상적인 것과 구체적인 것을 분리하여 연결하는 패턴

 - 하나의 계층 구조일 때 보다 각기 나누었을 때 독립적인 계층 구조로 발전시킬 수 있음.

  - 상속이 아닌 Composition을 통해 추상적인 것과 구체적인 것을 둘로 나누어 연결하여 사용

  - Client는 추상적인 계층구조만을 사용하며, implementation을 간접적으로 사용하게 됨.


      Client는 Abstraction을 사용
      Abstraction은 고차원의 추상적인 로직을 담고있는 클래스
      Abstraction의 구현체 또는 하위클래스들은 추상적인 개념들을 다양하게 확장
      Implementation은 구체적인 정보를 담고있는 객체(상태, 액션, 플랫폼에 특화된 코드)
      Concrete Implementation으로 또다른 계층구조 형성


  - 장점
    추상적인 것과 구체적인 것을 분리하여 추상적인 코드를 그대로 유지한 채 구체적인 코드를 변경하거나 확장할 수 있음.(OCP원칙 적합)
    이러한 분리를 통해 제각각 본인이 해야할 일만 관리(단일책임원칙 적합)\
    재사용성, 중복코드 감소 ==> 객체지향 원칙을 지킴으로써 얻을 수 있는 부가적 이익

  - 단점
    계층 구조가 늘어나면서(구체적인 계층, 추상적인 계층)복잡도가 증가할 수 있음.