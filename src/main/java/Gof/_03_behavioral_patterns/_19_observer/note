- 옵저버 패턴
다수의 객체가 특정 객체 상태 변화를 감지하고 알림을 받는 패턴
(변경을 감지하고 상태를 지켜보는 패턴. 여러개의 객체들이 상태 변경에 따라 반응해야할 때 사용)

- 발행(publish) - 구독(subscribe) 패턴을 구현할 수 있다.

- Subject : 여러 옵저버들을 등록하거나 해지. subject의 상태가 변경되면,
            자신에게 등록되어있는 모든 Observer들을 순회하면서 Observer가 제공하는 특정 메서드를 모두 호출.

    - observers : Observer[]
    + subscribe(Observer)
    + unsubscribe(Observer)
    + notify()

- <interface> Observer
    + update()

- ConcreteObserver
    + update()

 -장점
    - 상태를 변경하는 객체(publisher)와 변경을 감지하는 객체(subscriber)의 관계를 느슨하게 유지할 수 있다.
    - subject의 상태 변경을 주기적으로 조회하지 않고 자동으로 감지할 수 있다.
    - 런타임중에 옵저버를 추가하거나 제거할 수 있다.

 - 단점
    - 복잡도 증가
    - 다수의 Observer 객체 등록 이후 해지하지 않는다면 memory leak 문제 발생 가능
        GC이 대상이 되려면 해당하는 인스턴스를 참조하는 레퍼런스가 없어야 함.
        ex. 단지 map에 담겨져있다는 이유 만으로 GC이루어지지 않음.
        가장 좋은 대안은 unregister를 자주 해주는 것.
        ++ WeakReference를 hashMap에 적용하는 방법도 있음. 알아볼 것
            명시적으로 해제할 수 없을 때만.

