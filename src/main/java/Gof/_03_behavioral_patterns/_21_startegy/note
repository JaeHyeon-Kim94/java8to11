전략 패턴

 -  업무를 수행하는 방법이 여러가지일 때, 방법을 각각의 개별적인 클래스로 캡슐화를 하고,
    그것들을 공통된 인터페이스로 추상화 하여 로직을 수행하는 곳에서는
    추상적인 인터페이스만 사용하도록 함으로써 유연한 구조를 만들 수 있다.

  - 여러 알고리즘을 캡슐화하고 상호 교환 가능하게 만드는 패턴

 - 대표적인 예 : Comparator

 - Context
    - startegy : Strategy
    + operation()

 - <interface> Strategy
    + execute()

 - ConcreteStrategy
    + setContext(Context)
    + operation

 - Client


 - 장점
    새로운 전략을 추가하더라도 기존 코드 변경하지 않는다.
    상속 대신 위임을 사용할 수 있다
    런타임에 전략을 변경할 수 있다.

 - 단점
    복잡도가 증가한다
    클라이언트 코드가 구체적인 전략을 알아야 한다.
